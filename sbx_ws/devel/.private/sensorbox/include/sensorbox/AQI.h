// Generated by gencpp from file sensorbox/AQI.msg
// DO NOT EDIT!


#ifndef SENSORBOX_MESSAGE_AQI_H
#define SENSORBOX_MESSAGE_AQI_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensorbox
{
template <class ContainerAllocator>
struct AQI_
{
  typedef AQI_<ContainerAllocator> Type;

  AQI_()
    : pm10(0.0)
    , pm25(0.0)
    , pm50(0.0)
    , pm100(0.0)
    , tmp(0.0)
    , hum(0.0)
    , co2(0.0)  {
    }
  AQI_(const ContainerAllocator& _alloc)
    : pm10(0.0)
    , pm25(0.0)
    , pm50(0.0)
    , pm100(0.0)
    , tmp(0.0)
    , hum(0.0)
    , co2(0.0)  {
  (void)_alloc;
    }



   typedef float _pm10_type;
  _pm10_type pm10;

   typedef float _pm25_type;
  _pm25_type pm25;

   typedef float _pm50_type;
  _pm50_type pm50;

   typedef float _pm100_type;
  _pm100_type pm100;

   typedef float _tmp_type;
  _tmp_type tmp;

   typedef float _hum_type;
  _hum_type hum;

   typedef float _co2_type;
  _co2_type co2;





  typedef boost::shared_ptr< ::sensorbox::AQI_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensorbox::AQI_<ContainerAllocator> const> ConstPtr;

}; // struct AQI_

typedef ::sensorbox::AQI_<std::allocator<void> > AQI;

typedef boost::shared_ptr< ::sensorbox::AQI > AQIPtr;
typedef boost::shared_ptr< ::sensorbox::AQI const> AQIConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensorbox::AQI_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensorbox::AQI_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensorbox::AQI_<ContainerAllocator1> & lhs, const ::sensorbox::AQI_<ContainerAllocator2> & rhs)
{
  return lhs.pm10 == rhs.pm10 &&
    lhs.pm25 == rhs.pm25 &&
    lhs.pm50 == rhs.pm50 &&
    lhs.pm100 == rhs.pm100 &&
    lhs.tmp == rhs.tmp &&
    lhs.hum == rhs.hum &&
    lhs.co2 == rhs.co2;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensorbox::AQI_<ContainerAllocator1> & lhs, const ::sensorbox::AQI_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensorbox

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensorbox::AQI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensorbox::AQI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensorbox::AQI_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensorbox::AQI_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensorbox::AQI_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensorbox::AQI_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensorbox::AQI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "40b6414f047f4614963c31c7b66060cd";
  }

  static const char* value(const ::sensorbox::AQI_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x40b6414f047f4614ULL;
  static const uint64_t static_value2 = 0x963c31c7b66060cdULL;
};

template<class ContainerAllocator>
struct DataType< ::sensorbox::AQI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensorbox/AQI";
  }

  static const char* value(const ::sensorbox::AQI_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensorbox::AQI_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pm10\n"
"float32 pm25\n"
"float32 pm50\n"
"float32 pm100\n"
"float32 tmp\n"
"float32 hum\n"
"float32 co2\n"
;
  }

  static const char* value(const ::sensorbox::AQI_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensorbox::AQI_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pm10);
      stream.next(m.pm25);
      stream.next(m.pm50);
      stream.next(m.pm100);
      stream.next(m.tmp);
      stream.next(m.hum);
      stream.next(m.co2);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AQI_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensorbox::AQI_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensorbox::AQI_<ContainerAllocator>& v)
  {
    s << indent << "pm10: ";
    Printer<float>::stream(s, indent + "  ", v.pm10);
    s << indent << "pm25: ";
    Printer<float>::stream(s, indent + "  ", v.pm25);
    s << indent << "pm50: ";
    Printer<float>::stream(s, indent + "  ", v.pm50);
    s << indent << "pm100: ";
    Printer<float>::stream(s, indent + "  ", v.pm100);
    s << indent << "tmp: ";
    Printer<float>::stream(s, indent + "  ", v.tmp);
    s << indent << "hum: ";
    Printer<float>::stream(s, indent + "  ", v.hum);
    s << indent << "co2: ";
    Printer<float>::stream(s, indent + "  ", v.co2);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSORBOX_MESSAGE_AQI_H
